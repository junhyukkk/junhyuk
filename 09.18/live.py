"""
# 병합정렬

- 직접 구현할 일은 적다
- 과거 면접 단골 질문 > 코드를 보기 전 직접 해보기


# 퀵 정렬

P(피봇) 값 = 기준 값 기준으로 큰 값은 오른쪽, 작은 값은 왼쪽에 정렬
피봇 선택에 있어서도 피봇이 여러개 일때 그 중간값을 설정
반드시 손으로 그려보고 문제를 푸는 것이 중요
>> 파티션구분 i와 j가 따로 앞뒤에서 움직여 만난다면 호어
같이 움직인다면 로무토

# 이진 검색
★★★ 코딩테스트 단골 문제 ★★★
- 이진검색은 반드시 정렬된 상태로 수행해야함
ex)
"""
arr = [2, 4, 7, 9, 11, 19, 23]
arr.sort()      # 문제에서 데이터가 정렬되어 있다 라는 조건이 없을 때 (대부분의 경우)
                # 반드시 정렬한 후 코드 작성 진행
def binarysearch(target):
    low = 0
    high = len(arr) - 1
    # low > high 라면 데이터를 못찾은 경우기 때문에
    while low <= high:
        mid = (low + high) // 2

        # 1. 가운데 값이 정답인 경우
        if arr[mid] == target:
            return mid
        # 2. 가운데 값이 정답보다 작은경우
        elif arr[mid] < target:
            low = mid + 1
        # 3. 가운데 값이 정답보다 큰 경우
        else:
            high = mid + 1
    return "해당 데이터는 없습니다. (코테의 경우 -1 리턴하는 경우가 많음)"

print(f'9 = {binarysearch(9)}')